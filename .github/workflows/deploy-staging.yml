# .github/workflows/deploy-staging.yml
name: Deploy to Staging

on:
  push:
    branches: ['feature**']
    paths:
      - 'frontend/hugo/**'
      - 'infrastructure/terraform/application/**'
      - '.github/workflows/deploy-staging.yml'

  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        type: boolean
        default: true
      deploy_backend:
        description: 'Deploy backend'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  HUGO_VERSION: 'latest'

jobs:
  determine-environment:
    name: üéØ Orchestrate Deployment
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.config.outputs.frontend }}
      backend: ${{ steps.config.outputs.backend }}
      environment: ${{ steps.target.outputs.environment }}
      version: ${{ github.run_number }}
      cf_test_id: ${{ steps.target.outputs.cf_test_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Configure deployment
        id: config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "frontend=${{ github.event.inputs.deploy_frontend }}" >> $GITHUB_OUTPUT
            echo "backend=${{ github.event.inputs.deploy_backend }}" >> $GITHUB_OUTPUT
          else
            FRONTEND_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -q 'frontend/hugo' && echo true || echo false)
            BACKEND_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -q 'infrastructure/terraform/application' && echo true || echo false)
            echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
            echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          fi

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚öôÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: üì¶ Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infrastructure/terraform/persistent/.terraform
          key: terraform-persistent-${{ runner.os }}-${{ hashFiles('infrastructure/terraform/persistent/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-persistent-${{ runner.os }}-

      - name: Get infrastructure info
        id: target
        run: |
          # Enable Terraform provider caching
          export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache
          mkdir -p $TF_PLUGIN_CACHE_DIR

          cd infrastructure/terraform/persistent
          terraform init

          # Get ALL persistent infrastructure info in one operation
          ACTIVE=$(terraform output -raw active_environment)
          CF_TEST_ID=$(terraform output -raw cf_test_distribution_id)
          TARGET=$([[ "$ACTIVE" == "blue" ]] && echo "green" || echo "blue")

          echo "environment=$TARGET" >> $GITHUB_OUTPUT
          echo "cf_test_id=$CF_TEST_ID" >> $GITHUB_OUTPUT
          echo "üéØ Will deploy to: $TARGET (inactive)"
          echo "üì° CloudFront test ID: $CF_TEST_ID"

  frontend-unit-testing:
      name: üß™ Frontend Unit Testing
      runs-on: ubuntu-latest
      needs: determine-environment
      if: needs.determine-environment.outputs.frontend == 'true'
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'
            cache-dependency-path: frontend/hugo/package-lock.json

        - name: Install dependencies and run unit tests
          working-directory: frontend/hugo
          run: |
            npm ci
            npm test
            echo "‚úÖ All frontend unit tests passed"

  build-deploy-frontend:
    name: üé® Build & Deploy Frontend
    runs-on: ubuntu-latest
    needs: [determine-environment, frontend-unit-testing]
    if: needs.determine-environment.outputs.frontend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Build Hugo site
        working-directory: frontend/hugo
        run: |
          export HUGO_DEPLOY_VERSION="${{ needs.determine-environment.outputs.version }}"
          export HUGO_ENV="${{ needs.determine-environment.outputs.environment }}"
          rm -rf public/*
          hugo --minify --environment "$HUGO_ENV"
          echo "‚úÖ Built $HUGO_ENV site v$HUGO_DEPLOY_VERSION"

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        working-directory: frontend/hugo
        run: |
          aws s3 sync public/ "s3://dzresume-prod/${{ needs.determine-environment.outputs.environment }}/" --delete
          echo "‚úÖ Deployed to s3://dzresume-prod/${{ needs.determine-environment.outputs.environment }}/"

  invalidate-test:
    name: üåê Invalidate Frontend Cache
    runs-on: ubuntu-latest
    needs: [build-deploy-frontend, determine-environment]
    environment: staging
    steps:
      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîÑ Create & wait for invalidation
        run: |
          CF_ID="${{ needs.determine-environment.outputs.cf_test_id }}"
          echo "Using CloudFront distribution: $CF_ID"

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id "$CF_ID" \
            --paths '/*' \
            --query 'Invalidation.Id' \
            --output text)

          echo "‚è≥ Waiting for invalidation $INVALIDATION_ID to complete..."

          aws cloudfront wait invalidation-completed \
            --distribution-id "$CF_ID" \
            --id "$INVALIDATION_ID"

          echo "‚úÖ CloudFront cache cleared and ready for testing"

  verify-frontend-deployment:
    name: ‚úÖ Verify Frontend Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, build-deploy-frontend, invalidate-test]
    steps:
      - name: Verify frontend deployment
        run: |
          PAGE_CONTENT=$(curl -sL "https://test.dzresume.dev" 2>/dev/null)
          DEPLOYED_VERSION=$(echo "$PAGE_CONTENT" | grep 'name=.*deployment-version' | sed 's/.*deployment-version content=//' | sed 's/^"//' | sed 's/".*//' 2>/dev/null || echo "not_found")

          if [[ "$DEPLOYED_VERSION" == "not_found" ]]; then
            echo "‚ùå Version meta tag not found (deployment may be broken)"
            exit 1
          elif [[ "$DEPLOYED_VERSION" == *"v${{ needs.determine-environment.outputs.version }}"* ]]; then
            echo "‚úÖ Version verification successful: $DEPLOYED_VERSION"
          else
            echo "‚ùå Version mismatch!"
            echo "   Expected: v${{ needs.determine-environment.outputs.version }}"
            echo "   Found: $DEPLOYED_VERSION"
            exit 1
          fi

  deploy-backend:
    name: ‚ö° Backend Pipeline
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: staging
    if: needs.determine-environment.outputs.backend == 'true'
    outputs:
      health_url: ${{ steps.deploy.outputs.health_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: üì¶ Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infrastructure/terraform/application/.terraform
          key: terraform-application-${{ runner.os }}-${{ hashFiles('infrastructure/terraform/application/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-application-${{ runner.os }}-

      - name: Deploy backend
        id: deploy
        working-directory: infrastructure/terraform/application
        run: |
          # Enable Terraform provider caching
          export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache
          mkdir -p $TF_PLUGIN_CACHE_DIR

          terraform init
          terraform workspace select ${{ needs.determine-environment.outputs.environment }}
          terraform apply -auto-approve
          HEALTH_URL=$(terraform output -raw health_endpoint_url)
          echo "health_url=$HEALTH_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Backend deployed to ${{ needs.determine-environment.outputs.environment }}"

  test-backend-deployment:
    name: ‚ö° Verify Backend Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-backend]
    if: needs.deploy-backend.result == 'success'
    steps:
      - name: Verify backend deployment
        run: |
          HEALTH_URL="${{ needs.deploy-backend.outputs.health_url }}"
          echo "Testing backend health: $HEALTH_URL"

          RESPONSE=$(curl -s "$HEALTH_URL" 2>/dev/null || echo "FAILED")

          if [[ "$RESPONSE" == "FAILED" ]]; then
            echo "‚ùå Backend health check failed (no response)"
            exit 1
          elif echo "$RESPONSE" | grep -qi "healthy\|ok"; then
            echo "‚úÖ Backend health check passed: $RESPONSE"
          else
            echo "‚ùå Backend unhealthy response: $RESPONSE"
            exit 1
          fi

  test-api-endpoints:
      name: üß™ API Validation
      runs-on: ubuntu-latest
      needs: [deploy-backend, test-backend-deployment, determine-environment]
      if: needs.test-backend-deployment.result == 'success'
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Test APIs
          uses: SimonScholz/postman-newman-action@main
          with:
            collection: backend/tests/collections/api-tests.json
            environment: backend/tests/environments/${{ needs.determine-environment.outputs.environment }}.json
            reporters: 'cli'
            bail: failure
            timeoutRequest: 10000

  cypress-test:
    name: üß™ Cypress E2E Tests
    runs-on: ubuntu-latest
    needs:
      - build-deploy-frontend
      - test-api-endpoints
      - test-backend-deployment
      - verify-frontend-deployment
      - determine-environment
    # Only run E2E tests if nothing failed and at least one deployment succeeded
    if: >
      needs.verify-frontend-deployment.result != 'failure' &&
      needs.test-backend-deployment.result != 'failure' &&
      needs.test-api-endpoints.result != 'failure' &&
      (needs.verify-frontend-deployment.result == 'success' ||
      needs.test-backend-deployment.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: üß™ Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend/hugo
          headed: false

      - name: üìä Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results-${{ github.run_number }}
          path: |
            frontend/hugo/cypress/screenshots
            frontend/hugo/cypress/videos
          retention-days: 3

      - name: ‚úÖ Test Summary
        if: always()
        run: |
          echo "üéØ Cypress E2E Test Results"
          echo "Status: ${{ job.status }}"


  summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [determine-environment, verify-frontend-deployment, test-backend-deployment, test-api-endpoints, cypress-test]
    if: always()
    steps:
      - name: Summary
        run: |
          ENV_NAME="${{ needs.determine-environment.outputs.environment }}"
          VERSION="${{ needs.determine-environment.outputs.version }}"
          FRONTEND="${{ needs.verify-frontend-deployment.result || 'skipped' }}"
          BACKEND="${{ needs.test-backend-deployment.result || 'skipped' }}"
          API="${{ needs.test-api-endpoints.result || 'skipped' }}"
          E2E="${{ needs.cypress-test.result || 'skipped' }}"

          # CLI Output
          echo "üöÄ Staging: $ENV_NAME v$VERSION"
          echo ""
          echo "Frontend: $FRONTEND"
          echo "Backend: $BACKEND"
          echo "API Tests: $API"
          echo "E2E Tests: $E2E"
          echo ""

          # GitHub Summary
          echo "# üöÄ Staging: $ENV_NAME $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend:** $FRONTEND | **Backend:** $BACKEND | **API Tests:** $API" | **E2E:** $E2E" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Simple Decision Logic
          if [[ "$FRONTEND" == "success" || "$FRONTEND" == "skipped" ]] &&
            [[ "$BACKEND" == "success" || "$BACKEND" == "skipped" ]] &&
            [[ "$API" == "success" || "$API" == "skipped" ]] &&
            [[ "$E2E" == "success" || "$E2E" == "skipped" ]]; then

            if [[ "$FRONTEND" == "success" || "$BACKEND" == "success" ]]; then
              echo "‚úÖ Ready for production: https://test.dzresume.dev"
              echo "## ‚úÖ Ready for Production" >> $GITHUB_STEP_SUMMARY
              echo "**Staging:** https://test.dzresume.dev" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è  No deployments executed"
              echo "## ‚ö†Ô∏è No Changes Deployed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå Fix issues before promotion"
            echo "## ‚ùå Issues Found - Not Ready" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
